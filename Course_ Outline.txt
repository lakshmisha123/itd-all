Linux  
Have a good understanding of Linux operating system basics, including file system hierarchy, file permissions, processes, networking, and package management.


Scripting
Be proficient in shell scripting using bash shell and python scripting-related DevOps automation. Understand how to write scripts for automating tasks, managing configurations, and performing system administration tasks.


Git (Source Code Management)
Familiarize yourself with version control systems like Git. 


Version Control Basics: Understand the purpose and benefits of version control systems, Know the difference between centralized and distributed version control systems, and Understand the basics of Git's distributed version control system.
Git Repository: Understand what a Git repository is and how it stores and tracks changes and the difference between local and remote repositories.
Git Branching and Merging: Understand the concept of branches in Git. Know how to create, switch, and delete branches. Understand the different merging strategies and merge conflicts.
Git CLI: add, commit, stash, revert, reset, merge, rebase, log, history, remote, pull, push, etc.


Jenkins - Continuous Integration and Continuous Deployment (CI/CD)
Understand the principles of CI/CD and its role in the software development lifecycle. Be familiar with popular CI/CD tools such as Jenkins, and GitHub Actions CI/CD basics. 3-5 complete hands-on CI/CD setup workshops will be there.

Continuous Integration and Jenkins

Jenkins Installation and Configuration
Jenkins Jobs and Builds
Jenkins Plugins
Jenkins Pipelines
Jenkins Build Tools Integration (maven, npm)
Jenkins Security
Jenkins Integration and Extensibility (JFrog, Sonarqube, email, slack, etc..)
If required - Github/Gitlab actions basics will also be included.


AWS (Amazon Web Services)
When studying DevOps in the context of AWS, here are some AWS services that are relevant to DevOps:


Compute: EC2,  Autoscaling, Load Balancers (ELB), Route53, EKS, ECS, Fargate
Storage: S3, EBS, EFS
Network: VPC, Transit Gateway, Subnet, Route Tables, Security Groups, NACL, Connectivity Options (IGW, NAT, VPN) VPC Peering, Endpoints
Security & Access Management: IAM (Users, Groups, Roles, and policies), MFA, SSO, Landing Zone, Control Tower
Monitoring & Logging - Cloudtrail Cloudwatch, Alarms, Metrics, SNS, SES, SMS.
Database: RDS, DynamoDB
Developer Tools: CodeCommit, CodePipeline, CodeBuild, CodeDeploy, Lambda, API Gateway.
Note: Based on the industry standards some services will be added.


Terraform - Infrastructure as Code (IaC) 
Understand the concept of IaC and how Terraform enables you to define and manage infrastructure resources declaratively.


Terraform Basics: Have a good grasp of Terraform's syntax, including resource blocks, variables, data sources, dynamic blocks and provisioners.
Configuration Management: Understand how to organize and structure Terraform configurations using modules, remote backends, and workspaces.
Resource Provisioning: Familiarize yourself with the various providers supported by Terraform and their specific resource types. Know how to define, create, update, and destroy resources.
State Management: Understand the role of Terraform state files and the importance of managing them properly, including options for remote state storage and locking.
Dependency Management: Learn about dependencies between resources and how to express them in Terraform using implicit and explicit dependencies.
Terraform Modules: Understand the concept of modules and how they enable code reuse and modularity in Terraform configurations. Be able to create, use, and publish modules.
Remote Execution: Explore options for executing Terraform in different environments, such as running Terraform locally, in a CI/CD pipeline, or using Terraform Cloud/Enterprise.
Terraform Best Practices: Familiarize yourself with best practices for writing efficient and maintainable Terraform code, including naming conventions, code organization, and security considerations.


Docker
Docker Architecture: Understand the components of the Docker architecture, including Docker Engine, Docker Daemon, Docker Client, and Docker Registry.

Docker CLI: Know how to use Docker CLI commands for various operations, such as managing images, containers, networks, and volumes. Understand the options and flags available for different commands.

Dockerfile: Be familiar with Dockerfile syntax and instructions. Understand how to write efficient and optimized Dockerfiles for building Docker images. Multi-stage Dockerfile.

Docker Registry: Understand the concept of Docker registries and how they store and distribute Docker images. Know how to work with both public and private Docker registries.

Docker Images: Know what Docker images are and how they are built using Dockerfiles. Understand the layers in an image, image tagging, and how to work with Docker image repositories.

Docker Containers: Understand the concept of containers and how they provide lightweight, isolated environments for running applications. Know how to create, start, stop, and remove containers.

Docker Networking: Familiarize yourself with Docker networking concepts, including bridge networks, host networks, and overlay networks. Understand how to connect containers to networks and expose container ports.

Docker Volumes: Learn about Docker volumes and how they enable persistent data storage for containers. Understand the different types of volumes, such as host-mounted volumes and named volumes.

Docker Security: Be aware of Docker security best practices, including image vulnerability scanning, container isolation, user namespaces, and Docker security profiles.

Docker Compose: Understand how to use Docker Compose to define and manage multi-container applications. Know how to define services, networks, and volumes in a Compose file.

Docker Best Practices: Familiarize yourself with best practices for using Docker in production environments, including containerizing applications, optimizing image sizes, and managing container lifecycles.


Kubernetes
Kubernetes Architecture: Understand the high-level architecture of Kubernetes, including the control plane components (API server, etcd, scheduler, controller manager) and worker nodes (kubelet, container runtime, kube-proxy).
Pods: Know what pods are and how they are the basic building blocks in Kubernetes. Understand how to define and manage pods, including multi-container pods and pod lifecycle management.

Deployments: Understand deployments and how they enable declarative updates and scaling of application replicas. Be familiar with various deployment strategies such as rolling updates and blue-green deployments.

Controllers: Deployments, DaemonSet, StatefulSet, ReplicaSet, Job, CronJob, Namespace, Ingress, HorizontalPodAutoscaler (HPA), VerticalPodAutoscaler (VPA)
Services: Learn about Kubernetes services and their role in providing network connectivity to pods. Understand the differences between ClusterIP, NodePort, LoadBalancer, and ExternalName service types.

Kubernetes Storage:  Familiarize yourself with different types of volumes available in Kubernetes, such as emptyDir, hostPath, and PersistentVolumeClaims (PVCs). Understand how to use them to manage data in containers. Familiarize yourself with storage options in Kubernetes, such as hostPath, emptyDir, PersistentVolumes (PVs), PersistentVolumeClaims (PVCs), and storage classes.

ConfigMaps and Secrets: Know how to use ConfigMaps to store configuration data and Secrets to store sensitive information securely. Understand how to mount them into pods as environment variables or as files.

StatefulSets: Understand StatefulSets and how they manage stateful applications that require stable network identities and ordered scaling and deletion.
Kubernetes Networking: Learn about Kubernetes networking concepts, including Services, Ingress, and Network Policies. Understand how to configure networking for inter-pod communication and external access to applications.

Kubernetes Security: Be aware of Kubernetes security best practices, including RBAC (Role-Based Access Control), pod security policies, network policies.
Helm: Understand Helm, the Kubernetes package manager, and how it simplifies the deployment and management of applications on Kubernetes.
Monitoring and Logging: Learn about Kubernetes monitoring and logging solutions, such as Prometheus, Grafana, and ELK stack, and understand how to integrate them into your Kubernetes clusters.

Kubernetes Operations: Be familiar with common operational tasks in Kubernetes, such as scaling deployments, rolling updates, rolling back deployments, and debugging common issues.
Ansible (Configuration Management)
Have knowledge of configuration management tools like Ansible. Understand how to automate the provisioning and management of infrastructure resources (multiple machines).

Ansible Architecture: Understand the components of Ansible, including control nodes, managed nodes, inventory, and playbooks.
Playbooks: Familiarize yourself with YAML syntax and learn how to write Ansible playbooks. Understand tasks, modules, variables, conditionals, loops, and handlers.
Modules: Have knowledge of Ansible modules and their usage. Study a variety of modules, including package management, file manipulation, service management, template management, and user management.

Inventory Management: Understand how to define and manage inventories in Ansible. Learn about static inventories, dynamic inventories, groups, host variables, and group variables.

Ansible Ad-Hoc Commands: Be familiar with executing ad-hoc commands using Ansible. Understand how to run tasks on remote hosts without writing a playbook.
Roles: Study Ansible roles and how to organize and reuse playbook components using roles. Understand role structure, default variables, and role dependencies.

Variable Management: Understand how to work with variables in Ansible. Learn about variable precedence, variable types, and how to define and use variables in playbooks.
Templating: Familiarize yourself with Jinja2 templating engine and how to use templates in Ansible playbooks. Understand how to generate dynamic configuration files using templates.
Conditionals and Loops: Have knowledge of using conditionals and loops in Ansible playbooks. Understand how to control the flow of tasks based on conditions and iterate over a set of items.

Ansible Galaxy: Learn about Ansible Galaxy, the official community repository for Ansible roles. Understand how to search, install, and use roles from Ansible Galaxy.
Ansible Vault: Study Ansible Vault, a tool for encrypting sensitive data such as passwords and API keys. Understand how to create, edit, and use encrypted files in Ansible.
Ansible Best Practices: Familiarize yourself with best practices for writing Ansible playbooks. Understand code organization, idempotence, error handling, and security considerations.